plugins {
    id 'org.springframework.boot' version '2.5.0'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.postgresql:postgresql'
    //for JWT token
    implementation 'io.jsonwebtoken:jjwt:0.9.1'
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

project.ext.set("dbContainerName", "testDbContainer");
project.ext.set("dbMigrationContainerName", "testMigrationContainer");

task runDockerDb(type: Exec) {
    doFirst {
        stopMigrationContainers()
    }
    commandLine 'docker', 'run', '--rm',
            '--name', project.dbContainerName,
            '-e', 'POSTGRES_USER=test',
            '-e', 'POSTGRES_PASSWORD=test',
            '-e', 'POSTGRES_DB=test',
            '-p', '15432:5432',
            '-d', 'postgres:alpine'
}

task runDbContainer(type: Exec, dependsOn: [runDockerDb]) {
    commandLine 'docker', 'run', '--rm',
            '--name', project.dbMigrationContainerName,
            '--link', "$project.dbContainerName:db_host",
            '-v', "$projectDir/src/main/resources/db/migration:/flyway/sql",
            'boxfuse/flyway:6',
            "-url=jdbc:postgresql://db_host:5432/test",
            "-user=test",
            '-password=test',
            '-connectRetries=30',
            'migrate'
}

def stopMigrationContainers() {
    try {
        [project.dbMigrationContainerName, project.dbContainerName].each {
            print "Try stop runned docker containers: ${"docker stop $it".execute().text}"
        }
    } catch (Exception e) {
        println e.message
    }
}
